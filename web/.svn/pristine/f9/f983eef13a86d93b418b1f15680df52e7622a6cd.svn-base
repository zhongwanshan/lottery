/**
 * @auto: zhongwanshan
 * @date: 2015/09/28
 * @description: 所有通用方法
 */

var utility = (function (utility) {

    //#region  获取查询字符串参数
    /**
     * @description: 获取查询字符串
     */
    utility.getQueryParams = function () {
        // 取得查询字符串并去掉开头问号
        var qs = (location.search.length > 0 ? location.search.substring(1) : '');

        // 保存数据的对像
        var args = {};

        // 取得每一项
        var items = qs.split('&');
        var item = null;
        var name = null;
        var value = null;

        // 将每一项添加到 args 对象中
        for (var i = 0, len = items.length; i < len; i++) {
            item = items[i].split('=');
            name = item[0];
            value = item[1];
            args[name] = value;
        }

        return args;
    };
    //#endregion

    //#region  设置 cookie
    /**
     * @description: 设置cookie
     * @augments: {name: cookie名, value: cookie值}
     */
    utility.setcookie = function (name, value) {
        var Days = 30;
        var exp = new Date();
        exp.setTime(exp.getTime() + Days * 24 * 60 * 60 * 1000);
        document.cookie = name + "=" + escape(value) + ";expires=" + exp.toGMTString();
    };
    //#endregion

    //#region  获取 cookie
    utility.getcookie = function (name) {
        var arr = document.cookie.match(new RegExp("(^| )" + name + "=([^;]*)(;|$)"));
        if (arr != null) {
            return (arr[2]);
        } else {
            return "";
        }
    };
    //#endregion

    //#region  删除 cookie
    utility.delcookie = function (name) {
        var exp = new Date();
        exp.setTime(exp.getTime() - 1);
        var cval = this.getcookie(name);
        if (cval != null) document.cookie = name + "=" + cval + ";expires=" + exp.toGMTString();
    };
    //#endregion

    //#region  保存本地会话
    utility.setSessionStorage = function (key, sessionStorageObj) {
        window.sessionStorage.setItem(key, JSON.stringify(sessionStorageObj));
    };
    //#endregion

    //#region  获取本地会话信息
    utility.getSessionStorage = function (key) {
        return JSON.parse(window.sessionStorage.getItem(key));
    };
    //#endregion

    // 清空本地会话信息
    utility.cleanSessionStorage = function () {
        window.sessionStorage.clear();
    };

    // 保存本地存储信息
    utility.setLocalStorage = function (key, localStorageObj) {
        window.localStorage.setItem(key, JSON.stringify(localStorageObj));
    };

    // 返回本地存储信息
    utility.getLocalStorage = function (key) {
        return JSON.parse(window.localStorage.getItem(key));
    };

    // 清空本地存储信息
    utility.cleanLocalStorage = function () {
        window.localStorage.clear();
    };

    //验证输入是否为空
    utility.checkLen = function (str, len) {
        return str.length <= len ? true : false;
    };

    //验证是否中文姓名
    utility.checkName = function (str) {
        return str.match(/[\u4E00-\u9FA5]{2,5}(?:·[\u4E00-\u9FA5]{2,5})*/) ? true : false;
    };

    //验证手机号码格式是否为手机号码
    utility.checkPhone = function (str) {
        return str.match(/^(13|14|15|17|18)[0-9]{8}[0-9]$/) ? true : false;
    };

    // 验证密码格式
    utility.checkPass = function (str) {
        return str.match(/^[a-z0-9_-]{6,18}$/) ? true : false;
    };

    //验证是否是生日
    utility.checkNumber = function (str) {
        return str.match(/^(1[0-2]|0?[1-9])(0?[1-9]|[1-2][0-9]|3[0-1])$/) ? true : false;
    };

    // 验证身份证号码
    utility.checkIdentityNo = function (str) {
        var reg15 = /^[1-9]\d{7}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}$/;
        var reg18 = /^[1-9]\d{5}[1-9]\d{3}((0\d)|(1[0-2]))(([0|1|2]\d)|3[0-1])\d{3}([0-9]|X)$/;
        var bool = false;

        if (str.length == 15 && str.match(reg15)) {
            bool = true;
        } else if (str.length == 18 && str.match(reg18)) {
            bool = true;
        }
        return bool;
    };

    // 获取当前时间信息
    utility.getCurrentTimeInfo = function (date) {
        var nowDate = !!date ? new Date(date) : new Date();
        var year = nowDate.getFullYear(); // 年
        var month = nowDate.getMonth(); // 月
        var date = nowDate.getDate(); // 日
        var day = nowDate.getDay();	// 星期
        var hour = nowDate.getHours(); // 时
        var min = nowDate.getMinutes(); // 分
        var second = nowDate.getSeconds(); // 秒
        var weekDay = ['星期日', '星期一', '星期二', '星期三', '星期四', '星期五', '星期六'];

        return {
            "year": year,
            "month": month + 1,
            "date": date,
            "hour": hour,
            "min": min,
            "second": second,
            "weekDay": weekDay[day]
        };
    };

    // 把图片转换成
    utility.convertImgToBase64 = function (url, callback, outputFormat) {
        var canvas = document.createElement('CANVAS'),
            ctx = canvas.getContext('2d'),
            img = new Image;
        img.crossOrigin = 'Anonymous';
        img.onload = function () {
            canvas.height = img.height;
            canvas.width = img.width;
            ctx.drawImage(img, 0, 0);
            var dataURL = canvas.toDataURL(outputFormat || 'image/png');
            callback.call(this, dataURL);
            canvas = null;
        };

        img.src = url;
    };

    // 设置下拉组件标题
    utility.setPickerHeader = function (options) {
        return '<header class="bar bar-nav">\
              <button class="button button-link pull-right close-picker">确定</button>\
              <h1 class="title">'+ options.title + '</h1>\
              </header>';
    };

    // 把时间戳转换成日期
    utility.formatDate = function (nS) {
        var timeStr = new Date(parseInt(nS)).toLocaleString().replace(/年|月/g, ".").replace(/日/g, " ");
        var timeArr = timeStr.split(' ')[0].split('/');
        var year = parseInt(timeArr[0], 10);
        var month = parseInt(timeArr[1], 10);
        var day = parseInt(timeArr[2], 10);

        if (month < 10) {
            month = '0' + month;
        }

        if (day < 10) {
            day = '0' + day;
        }

        return year + "年" + month + "月" + day + "日";
    };

    // 格式化CMS系统返回的数据
    utility.formatData = function (options) {
        var data = options.data;
        var contentsList = data.contents || data.rows;
        var type = options.type;

        if (contentsList.length > 0) {
            for (var i = 0, len = contentsList.length; i < len; i++) {
                var imgSrc = contentsList[i]['icon'];

                if (imgSrc.indexOf('http://') == -1) {
                    imgSrc = options.host + '/uploads/' + imgSrc;
                }

                options.wrap.push({
                    contentId: contentsList[i]['content_id'], // 内容 id
                    categoryId: contentsList[i]['category_id'], // 栏目 id
                    categoryCode: data.code, // 栏目代码
                    paperId: contentsList[i]['paper_id'] || "",
                    videoSrc: contentsList[i]['video'] || "",
                    img: '<img src="' + imgSrc + '" />', // 预览图
                    title: contentsList[i]['title'], // 文章标题
                    isLink: contentsList[i]['link'].length > 0 ? true : false,
                    link: contentsList[i]['link'], // 连接
                    summary: contentsList[i]['summary'], // 文章摘要
                    time: contentsList[i]['update_date'].split(' ')[0], // 发布时间
                    headerTitle: data.name // 栏目名称
                });
            }
            options.callback && options.callback(options.data);
        }
    };

    //  从服务器获取数据或提交数据到服务器
    utility.interactWithServer = function (options) {
        $.ajax({
            type: options.method || "POST",
            url: options.url,
            async: options.async || true,
            dataType: "json",
            timeout: 18000,
            headers: {
                userId: options.headerInfo.userId || "",
                userToken: options.headerInfo.userToken || "",
                timestamp: Date.parse(new Date()),
                actionUrl: options.headerInfo.actionUrl || "",
                version: "100",
                appType: options.headerInfo.appType || "1",
                signStr: md5((options.headerInfo.userToken || "") + (options.headerInfo.userId || "") + Date.parse(new Date()) + (options.headerInfo.actionUrl || "") + "100" + JSON.stringify((options.dataObj || "")))
            },
            contentType: options.contentType || "application/x-www-form-urlencoded",
            data: options.dataObj || {},
            beforeSend: function (data) {
                options.beforeSendCallback && options.beforeSendCallback(data);
            },
            complete: function (XMLHttpRequest, textStatus) {
                options.completeCallback && options.completeCallback(XMLHttpRequest, textStatus);
            },
            success: function (data) {
                options.successCallback && options.successCallback(data);
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                options.errorCallback && options.errorCallback(XMLHttpRequest, textStatus, errorThrown);
            }
        });
    };

    // 格式化actionUrl
    utility.formatActionUrl = function (service, action, data) {
        return service + "?action=" + action; // + "&" + (!!$.serializeObject ? $.serializeObject(data) : $.param(data));
    }

    // 生成随机长度的数字
    utility.generateRandomData = function (n) {
        var chars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
        var res = "";
        for (var i = 0; i < n; i++) {
            var id = Math.ceil(Math.random() * 10);
            res += chars[id];
        }
        return res;
    };

    // 获取指定数字彩的近N期开奖数据
    utility.getDigitalPrizeData = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, options.action || CONFIG.ACTION.getDigitalPrizeData, {
                    fetchNum: options.fetchNum,
                    action: options.action || CONFIG.ACTION.getDigitalPrizeData,
                    lottoId: options.lottoId
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: options.action || CONFIG.ACTION.getDigitalPrizeData,
                lottoId: options.lottoId,
                fetchNum: options.fetchNum
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 获取数字彩当前期数接口
    utility.getDigitalIssue = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, CONFIG.ACTION.getDigitalIssue, {
                    action: CONFIG.ACTION.getDigitalIssue,
                    lottoId: options.lottoId
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: CONFIG.ACTION.getDigitalIssue,
                lottoId: options.lottoId
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 获取指定数字彩的近N期开奖数据
    utility.geFbMatchScoreData = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, CONFIG.ACTION.geFbMatchScore, {
                    action: CONFIG.ACTION.geFbMatchScore,
                    mid: options.mid,
                    num: options.num
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: CONFIG.ACTION.geFbMatchScore,
                mid: options.mid,
                num: options.num
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 获取当前篮球赛事及赔率赛果
    utility.geBkBlendMatches = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, CONFIG.ACTION.geBkBlendMatches, {
                    action: CONFIG.ACTION.geBkBlendMatches,
                    matchDay: options.matchDay,
                    type: options.type
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: CONFIG.ACTION.geBkBlendMatches,
                matchDay: options.matchDay,
                type: options.type
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 获取篮球近N期历史期数号接口
    utility.geRecentBkBlendIssueNo = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, CONFIG.ACTION.geRecentBkBlendIssueNo, {
                    action: CONFIG.ACTION.geRecentBkBlendIssueNo,
                    recent: options.recent
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: CONFIG.ACTION.geRecentBkBlendIssueNo,
                recent: options.recent
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 获取传统足球近N期历史期数号接口
    utility.geRecentFbTraditionIssueNo = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, CONFIG.ACTION.geRecentFbTraditionIssueNo, {
                    action: CONFIG.ACTION.geRecentFbTraditionIssueNo,
                    recent: options.recent
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: CONFIG.ACTION.geRecentFbTraditionIssueNo,
                recent: options.recent
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 传统足球获取14场/任选9赛事信息接口
    utility.geFbTraditionMatches = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.lotteryService, CONFIG.ACTION.geFbTraditionMatches, {
                    action: CONFIG.ACTION.geFbTraditionMatches,
                    num: options.num,
                    type: options.type
                }),
            },
            async: options.async || true,
            url: CONFIG.HOST + CONFIG.SERVICE.lotteryService,
            dataObj: {
                action: CONFIG.ACTION.geFbTraditionMatches,
                num: options.num,
                type: options.type
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message || data.resultTips) : alert(data.message || data.resultTips);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 生成指定长度的数组
    utility.genreateArr = function (arrLen) {
        var arr = [];

        for (var i = 1, len = arrLen; i <= len; i++) {
            if (i <= 9) {
                arr.push("0" + i);
            } else {
                arr.push("" + i);
            }
        }

        return arr;
    };

    // 从数组中返回指定长度的数据
    utility.getArrByNum = function (arr, num, bool) {
        var arrFlag = [];
        var len = num > arr.length ? arr.length : num;

        for (var i = 0; i < len; i++) {
            (function (i) {
                var randomNum = Math.ceil(Math.random() * arr.length - 1);
                if (!!bool) {
                    arrFlag.push(parseInt(arr.splice(randomNum, 1)[0], 10));
                } else {
                    arrFlag.push(arr.splice(randomNum, 1)[0]);
                }
            })(i);
        }

        return arrFlag;
    };

    // 求组合
    utility.getCombination = function (n, m) {
        return utility.getFactorial(n) / (utility.getFactorial(m) * utility.getFactorial(n - m));
    };

    // 求阶乘
    utility.getFactorial = function (num) {
        if (num < 0) {
            return -1;
        } else if (num === 0 || num === 1) {
            return 1;
        } else {
            for (var i = num - 1; i >= 1; i--) {
                num *= i;
            }
        }
        return num;
    };

    // 获取图片验证码
    utility.getImgCode = function (callback) {
        var self = this;
        utility.interactWithServer({
            headerInfo: {
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.imageService, CONFIG.ACTION.getImgCode, {
                    action: CONFIG.ACTION.getImgCode
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.imageService,
            dataObj: {
                action: CONFIG.ACTION.getImgCode
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!callback && callback(data)
                }
            },
        });
    };

    // 校验图片验证码
    utility.checkImgCode = function (reqId, imgCode, callback) {
        utility.interactWithServer({
            headerInfo: {
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.imageService, CONFIG.ACTION.validImgCode, {
                    reqId: reqId,
                    imgCode: imgCode,
                    action: CONFIG.ACTION.validImgCode
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.imageService,
            dataObj: {
                reqId: reqId,
                imgCode: imgCode,
                action: CONFIG.ACTION.validImgCode
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!callback && callback();
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message) : alert(data.message);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 获取手机验证码
    utility.getSmsCode = function (reqId, imgCode, phone, authType, success, complete) {
        utility.interactWithServer({
            headerInfo: {
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.commonService, CONFIG.ACTION.sendSms, {
                    phone: phone,
                    authType: authType,
                    action: CONFIG.ACTION.sendSms,
                    reqId: reqId,
                    imgCode: imgCode
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.commonService,
            dataObj: {
                phone: phone,
                authType: authType,
                action: CONFIG.ACTION.sendSms,
                reqId: reqId,
                imgCode: imgCode
            },
            beforeSendCallback: function () {
                (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";
            },
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
                !!complete && complete();
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!success && success(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message) : alert(data.message);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    // 设置数字彩订单信息
    utility.setDigitalOrderInfo = function (data, lottoid, lottoName, format, callback) {
        var self = data;
        var result = [];

        for (var i = 0, len = self.resultList.length; i < len; i++) {
            result.push(format(self, i));
        }

        self.buyInfo.betDetail = result.join("#");

        utility.setSessionStorage("orderInfo", {
            buyInfo: self.buyInfo,
            betNum: self.betNum,
            betMoney: self.betMoney,
            lottoid: lottoid,
            lottoName: lottoName
        });

        !!callback && callback(data);
    };

    // 获取最新用户数据
    utility.getUserInfo = function (options) {
        utility.interactWithServer({
            async: false,
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.commonService, CONFIG.ACTION.getUserInfo, {
                    action: CONFIG.ACTION.getUserInfo
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.commonService,
            dataObj: {
                action: CONFIG.ACTION.getUserInfo
            },
            successCallback: function (data) {
                if (data.code == "4101" || data.code == "4102" || data.code == "4104") {
                    utility.setLocalStorage("userInfo", null);
                    (typeof app != 'undefined' && !!app) ? app.confirm(data.message, function () {
                        mainView.router.load({
                            "url": "view/user/login.html",
                            "pushState": false
                        });
                    }) : (confirm(data.message), window.location.href = CONFIG.HOST + "/" + pathNameList[1] + "/view/user/login.html");
                } else {
                    !!options.callback && options.callback(data.data);
                }
            },
        });
    };

    // 获取接单信息
    utility.getShopOrderStat = function (callback) {
        utility.interactWithServer({
            async: false,
            headerInfo: {
                appType: 2,
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.commonOrderService, CONFIG.ACTION.getShopOrderStat, {
                    sysOpStr: "sss@2018",
                    action: CONFIG.ACTION.getShopOrderStat
                })
            },
            url: CONFIG.HOST + CONFIG.SERVICE.commonOrderService,
            dataObj: {
                sysOpStr: "sss@2018",
                action: CONFIG.ACTION.getShopOrderStat
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!callback && callback(data);
                }
            },
        });
    };

    // 用户退出登录
    utility.userLogout = function (callback) {
        utility.interactWithServer({
            headerInfo: {
                appType: "2",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.commonService, CONFIG.ACTION.userLogout, {
                    action: CONFIG.ACTION.userLogout
                }),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.commonService,
            dataObj: {
                action: CONFIG.ACTION.userLogout
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    // 如果登录成功，则把用户信息保存在本地
                    utility.setLocalStorage("userInfo", null);
                    !!callback && callback();
                } else {
                    alert(data.message);
                }
            },
        });
    };

    // 根据栏目代码获取栏目信息
    utility.findByCodeWithContents = function (options) {
        $.ajax({
            type: "POST",
            url: CONFIG.HOST + CONFIG.CMS.findByCodeWithContents,
            dataType: "json",
            timeout: 18000,
            contentType: "application/x-www-form-urlencoded",
            data: {
                code: options.code
            },
            success: function (data) {
                if (data.head.status == 1) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message) : alert(data.message);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                options.errorCallback && options.errorCallback(XMLHttpRequest, textStatus, errorThrown);
            }
        });
    };

    // 根据内容id获取内容详情
    utility.findByContentId = function (options) {
        $.ajax({
            type: "POST",
            url: CONFIG.HOST + CONFIG.CMS.findByContentId,
            dataType: "json",
            timeout: 18000,
            contentType: "application/x-www-form-urlencoded",
            data: {
                content_id: options.contentId
            },
            success: function (data) {
                if (data.head.status == 1) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message) : alert(data.message);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                options.errorCallback && options.errorCallback(XMLHttpRequest, textStatus, errorThrown);
            }
        });
    };

    // 预计算金额
    utility.previewOrder = function (options) {
        utility.interactWithServer({
            async: false,
            headerInfo: {
                appType: options.appType || "1",
                userId: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userId"] : "",
                userToken: (typeof USERINFO != 'undefined' && !!USERINFO) ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(options.service, options.params.action, options.params),
            },
            url: CONFIG.HOST + options.service,
            dataObj: options.params,
            completeCallback: function (XMLHttpRequest, textStatus) {
                (typeof app != 'undefined' && !!app) ? app.hideIndicator() : "";
            },
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data.data);
                } else if (data.code == 4101) {
                    (typeof app != 'undefined' && !!app) ? app.confirm("请先登录", function () {
                        mainView.router.load({
                            "url": "view/user/login.html",
                            "pushState": false
                        });
                    }) : (confirm(data.message), window.location.href = CONFIG.HOST + "/www/view/user/login.html");
                    return;
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message) : alert(data.message);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);

                    !!options.otherCallback && options.otherCallback(data);
                }
            },
        });
    };

    // 生成订单
    utility.generateOrder = function (options) {
        var orderInfo = utility.getSessionStorage("orderInfo");

        orderInfo.buyInfo.action = CONFIG.ACTION.saveOrder;
        orderInfo.buyInfo.type = 2;

        delete orderInfo.buyInfo.digitalBetType;
        delete orderInfo.buyInfo.dBetFunction;

        (typeof app != 'undefined' && !!app) ? app.showIndicator() : "";

        utility.previewOrder({
            "appType": options.appType || "1",
            "service": options.service,
            "params": orderInfo.buyInfo,
            "callback": function (data) {
                utility.setSessionStorage("generateOrder", data);
                !!options.callback && options.callback(data);
            }
        });
    };

    // 如果是定胆投注，则在红球中去掉胆码
    utility.duplicate = function (red, redD) {
        var redBetList = red;
        var redDAreaList = redD;
        var redList = [];

        for (var i = 0; i < redBetList.length; i++) {
            (function (i) {
                if (redDAreaList.indexOf(redBetList[i]) == -1) {
                    redList.push(redBetList[i]);
                }
            }(i));
        }

        return redList;
    };

    utility.leftTimer = function (starTime, endTime) {
        var leftTime = starTime - endTime; //计算剩余的毫秒数 
        var days = parseInt(leftTime / 1000 / 60 / 60 / 24, 10); //计算剩余的天数 
        var hours = parseInt(leftTime / 1000 / 60 / 60 % 24, 10); //计算剩余的小时 
        var minutes = parseInt(leftTime / 1000 / 60 % 60, 10);//计算剩余的分钟 
        var seconds = parseInt(leftTime / 1000 % 60, 10);//计算剩余的秒数 

        return {
            days: days < 9 && days > 0 ? '0' + days : days,
            hours: hours < 9 && days > 0 ? '0' + hours : hours,
            minutes: minutes < 9 && minutes > 0 ? '0' + minutes : minutes,
            seconds: seconds < 9 && seconds > 0 ? '0' + seconds : seconds
        };
    };

    utility.setiScroll = function (id, callback) {
        setTimeout(function () {
            var documentHeight = parseFloat(window.innerHeight);
            var currentPage = $("body").find(".page-on-center").attr("data-page");

            if (!!$("#page-" + currentPage).length) {
                $("#page-" + currentPage).css({
                    height: (documentHeight - 155) + "px"
                });

                if (typeof iScrollWrap != 'undefined') {
                    iScrollWrap.destroy();
                }

                iScrollWrap = new iScroll("page-" + currentPage, { hScroll: false, lockDirection: false, scrollX: false, scrollbarClass: "iScroll" });

                !!callback && callback();
            }
        }, 200);
    };

    utility.getUserSiteMessageList = function (options) {
        utility.interactWithServer({
            headerInfo: {
                appType: options.appType || "1",
                userId: !!USERINFO ? USERINFO["userId"] : "",
                userToken: !!USERINFO ? USERINFO["userToken"] : "",
                actionUrl: utility.formatActionUrl(CONFIG.SERVICE.commonService, CONFIG.ACTION.getUserSiteMessageList, options.messageInfo),
            },
            url: CONFIG.HOST + CONFIG.SERVICE.commonService,
            dataObj: options.messageInfo,
            successCallback: function (data) {
                if (data.code == 200) {
                    !!options.callback && options.callback(data);
                } else {
                    (typeof app != 'undefined' && !!app) ? app.showPreloader(data.message) : alert(data.message);
                    setTimeout(function () {
                        (typeof app != 'undefined' && !!app) ? app.hidePreloader() : "";
                    }, 1000);
                }
            },
        });
    };

    return utility;

}(utility || {}));
